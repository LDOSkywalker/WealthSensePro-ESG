rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fonction pour valider les données utilisateur
    function validateUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'firstName', 'lastName', 'createdAt']) &&
             data.email is string &&
             data.firstName is string &&
             data.lastName is string &&
             data.createdAt is timestamp;
    }

    // Fonction pour valider les données de conversation
    function validateConversationData() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'createdAt', 'topic']) &&
             data.userId is string &&
             data.createdAt is timestamp &&
             data.topic is string;
    }

    // Rules for the users collection
    match /users/{userId} {
      allow create: if isAuthenticated() && 
                   isOwner(userId) && 
                   validateUserData();
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) && 
                   validateUserData() &&
                   request.resource.data.diff(resource.data).affectedKeys()
                   .hasOnly(['firstName', 'lastName', 'updatedAt']);
      allow delete: if false;
    }
    
    // Rules for conversations
    match /conversations/{conversationId} {
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   validateConversationData();
      
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid &&
                   request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Rules for messages in conversations
      match /messages/{messageId} {
        function validateMessageData() {
          let data = request.resource.data;
          return data.keys().hasAll(['content', 'sender', 'timestamp']) &&
                 data.content is string &&
                 data.sender in ['user', 'bot'] &&
                 data.timestamp is timestamp;
        }

        allow create: if isAuthenticated() && 
                     get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid &&
                     validateMessageData();
        
        allow read: if isAuthenticated() && 
                   get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
        
        allow delete: if isAuthenticated() && 
                     get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
      }
    }
    
    // Rules for sessions collection (gestion des sessions sécurisées)
    match /sessions/{sessionId} {
      // Seul le backend peut créer/modifier/supprimer les sessions
      allow read, write: if false;
      
      // Les sessions sont gérées uniquement par le serveur backend
      // via les règles d'authentification et de session
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}