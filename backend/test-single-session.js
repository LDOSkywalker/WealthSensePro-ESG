const { admin } = require('./firebase-config');
const sessionManager = require('./utils/sessionManager');

// Firebase Admin est d√©j√† initialis√© dans firebase-config.js

async function testSingleSession() {
    console.log('üß™ Test de la r√©vocation atomique des sessions...\n');
    
    try {
        // Simuler une requ√™te
        const mockReq = {
            ip: '192.168.1.100',
            get: (header) => {
                if (header === 'User-Agent') {
                    return 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';
                }
                return null;
            }
        };
        
        // Test 1: Cr√©er une premi√®re session
        console.log('üì± Test 1: Cr√©ation de la premi√®re session...');
        const session1 = await sessionManager.createSession(
            'test-user-123',
            'test@example.com',
            mockReq,
            'user'
        );
        console.log('‚úÖ Session 1 cr√©√©e:', {
            jti: session1.jti,
            deviceId: session1.deviceId,
            deviceLabel: session1.deviceLabel
        });
        
        // Test 2: Cr√©er une deuxi√®me session (devrait r√©voquer la premi√®re)
        console.log('\nüì± Test 2: Cr√©ation de la deuxi√®me session (devrait r√©voquer la premi√®re)...');
        const mockReq2 = {
            ip: '192.168.1.101',
            get: (header) => {
                if (header === 'User-Agent') {
                    return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36';
                }
                return null;
            }
        };
        
        const session2 = await sessionManager.createSession(
            'test-user-123',
            'test@example.com',
            mockReq2,
            'user'
        );
        console.log('‚úÖ Session 2 cr√©√©e:', {
            jti: session2.jti,
            deviceId: session2.deviceId,
            deviceLabel: session2.deviceLabel
        });
        
        // Test 3: V√©rifier que la premi√®re session est r√©voqu√©e
        console.log('\nüîç Test 3: V√©rification de la r√©vocation de la session 1...');
        const validation1 = await sessionManager.validateSession(session1.jti);
        console.log('Session 1 status:', validation1);
        
        // Test 4: V√©rifier que la deuxi√®me session est active
        console.log('\nüîç Test 4: V√©rification que la session 2 est active...');
        const validation2 = await sessionManager.validateSession(session2.jti);
        console.log('Session 2 status:', validation2);
        
        // Test 5: Test avec policy 'two' pour un advisor
        console.log('\nüì± Test 5: Test avec policy "two" pour un advisor...');
        const mockReq3 = {
            ip: '192.168.1.102',
            get: (header) => {
                if (header === 'User-Agent') {
                    return 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15';
                }
                return null;
            }
        };
        
        const session3 = await sessionManager.createSession(
            'test-advisor-456',
            'advisor@example.com',
            mockReq3,
            'advisor'
        );
        console.log('‚úÖ Session 3 (advisor) cr√©√©e:', {
            jti: session3.jti,
            deviceId: session3.deviceId,
            deviceLabel: session3.deviceLabel
        });
        
        // Cr√©er une deuxi√®me session pour l'advisor (devrait √™tre autoris√©e)
        const mockReq4 = {
            ip: '192.168.1.103',
            get: (header) => {
                if (header === 'User-Agent') {
                    return 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36';
                }
                return null;
            }
        };
        
        const session4 = await sessionManager.createSession(
            'test-advisor-456',
            'advisor@example.com',
            mockReq4,
            'advisor'
        );
        console.log('‚úÖ Session 4 (advisor) cr√©√©e:', {
            jti: session4.jti,
            deviceId: session4.deviceId,
            deviceLabel: session4.deviceLabel
        });
        
        // V√©rifier que les deux sessions advisor sont actives
        console.log('\nüîç Test 6: V√©rification des sessions advisor...');
        const validation3 = await sessionManager.validateSession(session3.jti);
        const validation4 = await sessionManager.validateSession(session4.jti);
        console.log('Session 3 (advisor) status:', validation3.valid ? '‚úÖ Active' : '‚ùå Inactive');
        console.log('Session 4 (advisor) status:', validation4.valid ? '‚úÖ Active' : '‚ùå Inactive');
        
        console.log('\nüéâ Tests termin√©s avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    } finally {
        // Nettoyer les sessions de test
        console.log('\nüßπ Nettoyage des sessions de test...');
        try {
            const db = admin.firestore();
            const testSessions = await db.collection('sessions')
                .where('uid', 'in', ['test-user-123', 'test-advisor-456'])
                .get();
            
            const batch = db.batch();
            testSessions.forEach(doc => {
                batch.delete(doc.ref);
            });
            await batch.commit();
            console.log('‚úÖ Sessions de test nettoy√©es');
        } catch (cleanupError) {
            console.error('‚ö†Ô∏è Erreur lors du nettoyage:', cleanupError);
        }
        
        process.exit(0);
    }
}

// Lancer les tests
testSingleSession();
