#!/usr/bin/env node

/**
 * Script d'initialisation s√©curis√© pour cr√©er le premier administrateur
 * 
 * Usage: node scripts/create-admin.js --email=admin@example.com --role=admin
 * 
 * S√âCURIT√â : Ce script ne peut √™tre ex√©cut√© qu'une seule fois
 * Une fois qu'un admin existe, utilisez l'interface admin pour en cr√©er d'autres
 * 
 * ‚ö†Ô∏è  ATTENTION S√âCURIT√â CRITIQUE :
 * Ce script v√©rifie uniquement la pr√©sence d'admins dans Firestore.
 * En cas de suppression manuelle d'un admin, le script pourrait √™tre r√©utilis√©.
 * NE JAMAIS SUPPRIMER MANUELLEMENT UN ADMIN DEPUIS FIRESTORE.
 */

const { admin, db } = require('../firebase-config');
const { secureLogger } = require('../utils/secureLogger');

// Configuration des couleurs pour la console
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

const log = {
    info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
    success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
    warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
    error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
    header: (msg) => console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}`)
};

/**
 * V√©rifie si des administrateurs existent d√©j√†
 */
async function checkExistingAdmins() {
    try {
        log.info('V√©rification des administrateurs existants...');
        
        const existingAdmins = await db.collection('users')
            .where('role', '==', 'admin')
            .get();
        
        if (existingAdmins.size > 0) {
            log.error('Des administrateurs existent d√©j√† !');
            log.warning(`Nombre d'admins trouv√©s : ${existingAdmins.size}`);
            
            // Afficher les admins existants
            existingAdmins.forEach(doc => {
                const data = doc.data();
                log.info(`- ${data.email} (${data.firstName} ${data.lastName})`);
            });
            
            log.warning('Utilisez l\'interface admin pour cr√©er d\'autres administrateurs.');
            log.warning('Ce script est r√©serv√© √† l\'initialisation du premier admin.');
            
            return false;
        }
        
        log.success('Aucun administrateur trouv√©. Le script peut continuer.');
        return true;
    } catch (error) {
        log.error(`Erreur lors de la v√©rification : ${error.message}`);
        return false;
    }
}

/**
 * Cr√©e un nouvel administrateur
 */
async function createAdmin(email, role = 'admin') {
    try {
        log.info(`Cr√©ation de l'administrateur : ${email} (${role})`);
        
        // V√©rifier que l'utilisateur existe dans Firebase Auth
        log.info('V√©rification de l\'existence de l\'utilisateur...');
        const userRecord = await admin.auth().getUserByEmail(email);
        
        if (!userRecord) {
            log.error(`L'utilisateur ${email} n'existe pas dans Firebase Auth`);
            log.warning('L\'utilisateur doit d\'abord s\'inscrire via l\'application');
            return false;
        }
        
        log.success(`Utilisateur trouv√© : ${userRecord.uid}`);
        
        // V√©rifier si l'utilisateur existe d√©j√† dans Firestore
        const userDoc = await db.collection('users').doc(userRecord.uid).get();
        
        if (!userDoc.exists) {
            log.error(`L'utilisateur ${email} n'existe pas dans Firestore`);
            log.warning('L\'utilisateur doit d\'abord compl√©ter son profil');
            return false;
        }
        
        const userData = userDoc.data();
        log.info(`Profil trouv√© : ${userData.firstName} ${userData.lastName}`);
        
        // Mettre √† jour le r√¥le
        log.info('Mise √† jour du r√¥le...');
        await db.collection('users').doc(userRecord.uid).update({
            role: role,
            adminCreatedAt: Date.now(),
            adminCreatedBy: 'SYSTEM_INIT',
            updatedAt: Date.now()
        });
        
        log.success(`R√¥le mis √† jour avec succ√®s : ${role}`);
        
        // Log de l'op√©ration
        secureLogger.operation('admin_created_via_script', {
            email: email,
            role: role,
            uid: userRecord.uid,
            firstName: userData.firstName,
            lastName: userData.lastName
        });
        
        return true;
    } catch (error) {
        log.error(`Erreur lors de la cr√©ation de l'admin : ${error.message}`);
        return false;
    }
}

/**
 * Fonction principale
 */
async function main() {
    try {
        log.header('üîê SCRIPT DE CR√âATION D\'ADMINISTRATEUR - WEALTHSENSE PRO');
        log.info('V√©rification de la s√©curit√©...');
        
        // R√©cup√©ration des param√®tres
        const email = process.argv.find(arg => arg.startsWith('--email='))?.split('=')[1];
        const role = process.argv.find(arg => arg.startsWith('--role='))?.split('=')[1] || 'admin';
        
        // Validation des param√®tres
        if (!email) {
            log.error('Email requis !');
            log.info('Usage: node scripts/create-admin.js --email=admin@example.com --role=admin');
            process.exit(1);
        }
        
        if (!email.includes('@')) {
            log.error('Email invalide !');
            process.exit(1);
        }
        
        // V√©rification des r√¥les autoris√©s
        const allowedRoles = ['admin', 'support', 'advisor'];
        if (!allowedRoles.includes(role)) {
            log.error(`R√¥le invalide : ${role}`);
            log.info(`R√¥les autoris√©s : ${allowedRoles.join(', ')}`);
            process.exit(1);
        }
        
        log.info(`Param√®tres valid√©s :`);
        log.info(`- Email : ${email}`);
        log.info(`- R√¥le : ${role}`);
        
        // V√©rification des administrateurs existants
        const canProceed = await checkExistingAdmins();
        if (!canProceed) {
            process.exit(1);
        }
        
        // Cr√©ation de l'administrateur
        const success = await createAdmin(email, role);
        if (success) {
            log.header('üéâ ADMINISTRATEUR CR√â√â AVEC SUCC√àS !');
            log.success(`L'utilisateur ${email} est maintenant ${role}`);
            log.info('Vous pouvez maintenant vous connecter √† l\'interface admin');
            log.warning('Ce script ne peut plus √™tre utilis√©. Supprimez-le du serveur.');
        } else {
            log.error('√âchec de la cr√©ation de l\'administrateur');
            process.exit(1);
        }
        
    } catch (error) {
        log.error(`Erreur fatale : ${error.message}`);
        process.exit(1);
    }
}

// Ex√©cution du script
if (require.main === module) {
    main();
}

module.exports = { createAdmin, checkExistingAdmins };
